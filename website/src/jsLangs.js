// The website uses a modified javascript grammar. Therefore
// i can't import any grammars that depend on javascript, since
// then the normal js-grammar will get imported.

import { Prism as e } from "prism-code-editor"
var t=e.languages,a=t.insertBefore,n=e.util.clone(t.js),s=t.jsx=t.extend("markup",n),r=(F=s.tag).inside,i=/(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))*\*\/)/.source,l=/(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source,p=/(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/,c=e=>RegExp(e.source.replace(/<S>/g,i).replace(/<BRACES>/g,l).replace(/<SPREAD>/g,p.source));p=c(p),F.pattern=c(/<\/?(?:(?!\d)[^\s>\/=<%]+(?:<S>+(?:[^\s{*<>\/=]+(?:<S>*=\s*(?:(?:"[^"]*"|'[^']*'|[^\s{'"\/>=]+|<BRACES>)|(?=\S)))?|<SPREAD>))*<S>*\/?)?>/),r.tag.pattern=/^<\/?[^\s>/]*/,r["attr-value"].pattern=/=\s*(?:"[^"]*"|'[^']*'|[^\s\/'">]+)?/,r.tag.inside["class-name"]=/^[A-Z]\w*(?:\.[A-Z]\w*)*$/,r.comment=n.comment,delete s.style,delete s.script,delete s["markup-bracket"],a("inside","attr-name",{spread:{pattern:p,inside:s}},F),a("inside","special-attr",{script:{pattern:c(/=<BRACES>/),alias:"language-jsx",inside:{"script-punctuation":{pattern:/^=/,alias:"punctuation"},rest:s}}},F);var o=e=>e&&(!e.type||"plain-text"==e.type),d=(t,a,n)=>{for(var s=0,r=[];s<t.length;s++){var i,l,p,c,u=t[s],g=u.length,m=u.content,y=u.type,F=!y;y&&("tag"==y&&"tag"==m[0].type?"/"==(l=a.slice(n,n+m[0].length))[1]?r[0]&&r[r.length-1][0]==l.slice(2)&&r.pop():"/"!=a[n+g-2]&&r.push([l.slice(1),0]):r[0]&&"punctuation"==y?(i=r[r.length-1],"{"==m?i[1]++:i[1]&&"}"==m?i[1]--:F=!0):F=!0),F&&r[0]&&!r[r.length-1][1]?(p=n,o(t[s+1])&&(g+=t[s+1].length,t.splice(s+1,1)),o(t[s-1])&&(p-=t[--s].length,t.splice(s,1)),c=a.slice(p,n+g),t[s]=new e.Token("plain-text",c,null,c)):Array.isArray(m)&&d(m,a,n),n+=g}};e.hooks.add("after-tokenize",(e=>{"jsx"!=e.language&&"tsx"!=e.language||d(e.tokens,e.code,0)}));var u=t.ts=t.typescript=t.extend("js",{"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\d)(?:(?!\s)[$\w\xA0-\uFFFF])+(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,lookbehind:!0,greedy:!0},builtin:/\b(?:Array|Function|Promise|any|boolean|never|number|string|symbol|unknown)\b/});u.keyword.push(/\b(?:abstract|declare|is|keyof|readonly|require)\b/,/\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,/\btype\b(?=\s*(?:[\{*]|$))/),delete u.parameter,delete u["literal-property"];var g=e.util.clone(u);delete g["class-name"],u["class-name"].inside=g,a("typescript","function",{decorator:{pattern:/@[$\w\xA0-\uFFFF]+/,inside:{at:{pattern:/^@/,alias:"operator"},function:/^[\s\S]+/}},"generic-function":{pattern:/#?(?!\d)(?:(?!\s)[$\w\xA0-\uFFFF])+\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,greedy:!0,inside:{function:/^#?(?!\d)(?:(?!\s)[$\w\xA0-\uFFFF])+/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:g}}}});var m=e.util.clone(t.ts),y=t.tsx=t.extend("jsx",m),F=y.tag,x="(?:^|(";delete y.parameter,delete y["literal-property"];try{RegExp("(?<=)"),x+="?<="}catch{F.lookbehind=!0}F.pattern=RegExp(x+`[^\\w$])|(?=</))${F.pattern.source}`,"g");
