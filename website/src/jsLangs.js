// The website uses a modified javascript grammar. Therefore
// i can't import any grammars that depend on javascript, since
// then the normal js-grammar will get imported.

import {Prism as e } from "prism-code-editor"
var t=e.languages,n=t.insertBefore,a=e.util.clone(t.js),s=t.jsx=t.extend("markup",a),r=s.tag,i=/(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source,p=/(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source,l=/(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/,o=e=>RegExp(e.source.replace(/<S>/g,i).replace(/<BRACES>/g,p).replace(/<SPREAD>/g,l.source));l=o(l),r.pattern=o(/<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/),r.inside.tag.pattern=/^<\/?[^\s>\/]*/,r.inside["attr-value"].pattern=/=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/,r.inside.tag.inside["class-name"]=/^[A-Z]\w*(?:\.[A-Z]\w*)*$/,r.inside.comment=a.comment,delete s.style,delete s.script,delete s["markup-bracket"],n("inside","attr-name",{spread:{pattern:l,inside:s}},r),n("inside","special-attr",{script:{pattern:o(/=<BRACES>/),alias:"language-javascript",inside:{"script-punctuation":{pattern:/^=(?=\{)/,alias:"punctuation"},rest:s}}},r);var c=e=>e&&e.type?Array.isArray(e=e.content)?e.map(c).join(""):e:e||"",u=t=>{for(var n=0,a=[];n<t.length;n++){var s,r=t[n],i=!1,p=r.content,l=r.type;if(l&&("tag"==l&&"tag"==p[0].type?"</"==p[0].content[0].content?a[0]&&a[a.length-1][0]==c(p[0].content[1])&&a.pop():">"==p[p.length-1].content&&a.push([c(p[0].content[1]),0]):a[0]&&"punctuation"==l?(s=a[a.length-1],"{"==p?s[1]++:s[1]&&"}"==p?s[1]--:i=!0):i=!0),(i||!l)&&a[0]&&!a[a.length-1][1]){var o=c(r),d=e=>e&&(!e.type||"plain-text"==e.type);d(t[n+1])&&(o+=c(t[n+1]),t.splice(n+1,1)),d(t[n-1])&&(o=c(t[n-1])+o,t.splice(n-1,1),n--),t[n]=new e.Token("plain-text",o,null,o)}Array.isArray(p)&&u(p)}};e.hooks.add("after-tokenize",(e=>{"jsx"!=e.language&&"tsx"!=e.language||u(e.tokens)}));var d=t.ts=t.typescript=t.extend("js",{"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,lookbehind:!0,greedy:!0},builtin:/\b(?:Array|Function|Promise|any|boolean|never|number|string|symbol|unknown)\b/});d.keyword.push(/\b(?:abstract|declare|is|keyof|readonly|require)\b/,/\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,/\btype\b(?=\s*(?:[\{*]|$))/),delete d.parameter,delete d["literal-property"];var F=e.util.clone(d);delete F["class-name"],d["class-name"].inside=F,n("typescript","function",{decorator:{pattern:/@[$\w\xA0-\uFFFF]+/,inside:{at:{pattern:/^@/,alias:"operator"},function:/^[\s\S]+/}},"generic-function":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,greedy:!0,inside:{function:/^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:F}}}});var g=e.util.clone(d),y=t.tsx=t.extend("jsx",g),m=(r=y.tag,"(");delete y.parameter,delete y["literal-property"];try{RegExp("(?<=)"),m+="?<="}catch{r.lookbehind=!0}r.pattern=RegExp(m+`^|[^\\w$]|(?=</))(?:${r.pattern.source})`,"g");
